{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/manuelmgv117/PCD/blob/main/Practica4_Numpy.ipynb(Personal)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rU10uCvc9noL"
      },
      "source": [
        "# Desarrollo de Aplicaciones para Análisis de Datos\n",
        "-------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TES8iyTs9noQ"
      },
      "source": [
        "# NumPy Ejercicios\n",
        "\n",
        "Ahora que hemos aprendido sobre NumPy vamos a poner a prueba tus conocimientos. Empezaremos con algunas tareas sencillas, y luego se te harán algunas preguntas más complicadas."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8qhaEgYX9noR"
      },
      "source": [
        "#### Importar NumPy como np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z6k4DItU9noT"
      },
      "outputs": [],
      "source": [
        "import numpy as np"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2aSz7DT_9noV"
      },
      "source": [
        "#### Crear un array de 10 ceros"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "BHp0yzTv9noV",
        "outputId": "13ddf604-2a07-420b-b6b9-09da53173a7a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"
          ]
        }
      ],
      "source": [
        "zeros = np.zeros(10)\n",
        "print(zeros)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E0CuWes_9noW"
      },
      "source": [
        "#### Crear un array de 10 unos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "pzBozUmy9noX",
        "outputId": "3f8e06c2-d8a5-4d92-d508-a9e9bdee025c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n"
          ]
        }
      ],
      "source": [
        "unos = np.ones(10)\n",
        "print(unos)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s84htAo09noY"
      },
      "source": [
        "#### Crear un array de 10 cincos"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "jOHjy9-49noZ",
        "outputId": "29b0fe0c-619f-454e-f17f-d02c2367fb15",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5 5 5 5 5 5 5 5 5 5]\n"
          ]
        }
      ],
      "source": [
        "#np.full permite generar cualquier numero y la cantidad de ellos\n",
        "cincos = np.full(10,5)\n",
        "print(cincos)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gW69C6N29noZ"
      },
      "source": [
        "#### Crear un array de enteros entre 10 y 50"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "SmUq-_ey9noZ",
        "outputId": "a9b9d040-1ac7-4ded-8899-0f9af9d2319b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n",
            " 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50]\n"
          ]
        }
      ],
      "source": [
        "# np.arange() permite generar numeros aleatorios en el rango indicado\n",
        "ints = np.arange(10,51)\n",
        "print(ints)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "geLCmWmf9noa"
      },
      "source": [
        "#### Crear un array de todos los números enteros pares de 10 a 50"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "3Cyu0bWU9nob",
        "outputId": "6d41349e-854a-4706-8aa0-cbdf4d22bb9c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50]\n"
          ]
        }
      ],
      "source": [
        "# El tercer argumento indica como avanzara el iterador\n",
        "pares = np.arange(10,51,2)\n",
        "print(pares)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0iBFUzYJ9nob"
      },
      "source": [
        "#### Crear una matriz 3x3 con valores comprendidos entre 0 y 8"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "DmPoajmh9noc",
        "outputId": "0703edf4-ee5c-496c-ea1c-4c3e9ddc5f0b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 1 2]\n",
            " [3 4 5]\n",
            " [6 7 8]]\n"
          ]
        }
      ],
      "source": [
        "# la funcion .reshape() convierte el arreglo en una matriz de las dimensiones indicadas\n",
        "\n",
        "matriz = np.arange(0,9).reshape(3,3)\n",
        "print(matriz)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BOyxFoQ39noc"
      },
      "source": [
        "#### Crear una matriz indentidad 3x3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "djmKEGar9nod",
        "outputId": "8a08fa01-ae57-4c6c-adde-8ad362e6ca07",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0.]\n",
            " [0. 1. 0.]\n",
            " [0. 0. 1.]]\n"
          ]
        }
      ],
      "source": [
        "# La funcion np.eye() Crea una matriz con una diagonal de ceros de la dimension cuadrada indicada\n",
        "\n",
        "identity_matrix = np.eye(3)\n",
        "print(identity_matrix)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8a-4OaAB9nod"
      },
      "source": [
        "#### Usa NumPy para generar un número aleatorio entre  0 y 1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "g-jWRGNq9noe",
        "outputId": "42515726-e145-405f-aab3-d0eb6c4227d2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.8271678434340008\n"
          ]
        }
      ],
      "source": [
        "aleatorio = np.random.rand() # Devuelve un numero aleatorio de una distr. uniforme entre 0 y 1\n",
        "print(aleatorio)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "F0XQ8gBJ9noe"
      },
      "source": [
        "#### Utiliza NumPy para generar una matriz de 25 números aleatorios extraídos de una distribución normal estándar."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "IRnbYCR69noe",
        "outputId": "39b52d76-1330-4979-b9bd-023e5a46d267",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0.67756607 -0.16961493  0.67430451 -0.34394756 -0.66548255 -0.20879612\n",
            "  1.16589444 -0.80723126  0.49018261 -0.57228601  0.73064406  0.89128284\n",
            " -1.32542044  1.58236256  0.40142897  0.27095174  0.1127731   0.24267229\n",
            "  0.17892861 -0.53047329  0.3823623  -1.53614789  1.31031818 -0.44098636\n",
            " -0.06506936]\n"
          ]
        }
      ],
      "source": [
        "matrix_dn = np.random.randn(25)\n",
        "print(matrix_dn)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B_AKElXv9noe"
      },
      "source": [
        "#### Crea una matriz de 20 puntos linealmente espaciados entre 0 y 1:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vTVTmei_9nof"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vo7nbfku9nof"
      },
      "source": [
        "## Indexación y selección en Numpy\n",
        "\n",
        "Ahora se te darán unas cuantas matrices, y se te pedirá que replique las salidas matriciales resultantes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "84ayy2SO9nof",
        "outputId": "ff819333-25f6-4fa6-f4c3-1b4d83ba05dc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 1,  2,  3,  4,  5],\n",
              "       [ 6,  7,  8,  9, 10],\n",
              "       [11, 12, 13, 14, 15],\n",
              "       [16, 17, 18, 19, 20],\n",
              "       [21, 22, 23, 24, 25]])"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "....\n",
        "mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Be-vn0IW9noh",
        "outputId": "aa8d2f3b-80e3-4386-c121-ff9403df9546"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[12, 13, 14, 15],\n",
              "       [17, 18, 19, 20],\n",
              "       [22, 23, 24, 25]])"
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JIGzOrnC9noi",
        "outputId": "05b0dab5-9032-46c6-b520-90e64500378c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "20"
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SxNr3Ca99noi",
        "outputId": "fcaf2dac-0857-401b-f1ed-13684a78424a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[ 2],\n",
              "       [ 7],\n",
              "       [12]])"
            ]
          },
          "execution_count": 42,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "30SAnKGg9noj",
        "outputId": "d14ae639-aa5d-46eb-c502-f7a2b6d5e1da"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([21, 22, 23, 24, 25])"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D73DyNK09noj",
        "outputId": "1d467907-f50a-490b-de81-7d7a8085cda4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[16, 17, 18, 19, 20],\n",
              "       [21, 22, 23, 24, 25]])"
            ]
          },
          "execution_count": 53,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7VM85y4j9noj"
      },
      "source": [
        "### Ahora haz lo siguiente"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OzW7D5sU9noj"
      },
      "source": [
        "#### Obtener la suma de todos los valores en mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A3rvs4Sh9nok"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MPS-yKSH9nok"
      },
      "source": [
        "####  Obtener la desviación estándar de los valores en mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HrlN7-YX9nok"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "34ajbNSg9nok"
      },
      "source": [
        "#### Obtener la suma de todas las columnas de mat"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BzrkVAmI9nok"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}